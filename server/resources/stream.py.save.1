import os
dirname = os.path.dirname(__file__)
os.sys.path.append(dirname)

from flask import Response
from flask_restful import fields, marshal_with, reqparse, Resource
import io
from ..ai.models.cv.detection import FaceDetection
from ..ai.models.cv.recognition import FaceRecognition
from ..ai.utils.stream_utils import VideoCapture
from ..ai.utils.visualization import stack_images

import cv2
import numpy as np
import threading

import requests

# print(os.path.exists('../ai/models/cv/demo_face_model.hdf5'))

colab_url = 'http://cff575e4.ngrok.io/' + '/recognize'
addr = 'rtsp://admin:admin@192.168.3.22:554' ### user= admin, pass = admin

class Stream(Resource):
    def __init__(self):
        super()
        # self.vc = cv2.VideoCapture(0)
        try:
            self.vc = VideoCapture(addr)
        except:
            print('Cannot connect to IP Cam, using local instead ...')
            self.vc = VideoCapture(0)

        self.cropped_frame = None
        self.detector = FaceDetection(MAX_FRAMES=3)
        self.predictor = FaceRecognition(None, 'demo_label_dict.hdf5')
        self.label = None
        self.prob = None

        self.t_post = threading.Thread(target=self.post)
        se


    def gen(self):
        """Video streaming generator function."""

        colors = [(255,0,0), (0,255,0), (0,0,255), (255,255,0), (0,255,255), (255,0,255), (0,0,0)]

        font = cv2.FONT_HERSHEY_SIMPLEX
        font_scale = 1
        font_color = (0,255,0)
        line_type = 2

        while True:
            # read_return_code, frame = self.vc.read()
            frame = self.vc.read()
            cams = []
            # imencoded = cv2.imencode('.jpg', frame)[1]

            # io_buf = io.BytesIO(imencoded)
            # yield (b'--frame\r\n'
            #     b'Content-Type: image/jpeg\r\n\r\n' + io_buf.read() + b'\r\n')

           

            # detect
            try:
                tframe, self.cropped_frame = self.detector.detect(frame)

                if self.cropped_frame is not None:

                    for i,fr in enumerate(self.cropped_frame):
                        # _, self.label, self.prob = self.predictor.predict(fr, None)

                        _, self.label, self.prob, cam = self.predictor.predict_with_heatmap(fr, None)
                        print(cam)
                        cams.append(cam)
                        cv2.putText(tframe, str(self.label) + ': ' + str(self.prob), (10 + 400*i,30), 
                                    font, font_scale, colors[i], line_type)

                #encode_return_code, image_buffer = cv2.imencode('.jpg', tframe)

                # encoded_frame = stack_images(tframe, self.cropped_frame, cams)
                encode_return_code, image_buffer = cv2.imencode('.jpg', tframe)

            except:
                cv2.putText(frame, 'No detection', (10,30), font, font_scale, font_color, line_type)
                encode_return_code, image_buffer = cv2.imencode('.jpg', frame)

            io_buf = io.BytesIO(image_buffer)

            yield (b'--frame\r\n'
                b'Content-Type: image/jpeg\r\n\r\n' + io_buf.read() + b'\r\n')

            #predict
            # _, str_label, prob = self.predictor.predict(cropped_frame, 0)

            # print(str_label, prob)

    def get(self):
        # detect
        return Response(self.gen(), 
                        mimetype='multipart/x-mixed-replace; boundary=frame')

    def post(self):
        # if self.cropped_frame is None:
        #     return {'label': 'None', 'prob': 'None'}

        # # recognition
        # _, str_label, prob = self.predictor.predict(self.cropped_frame, 0)
        # print(str_label, prob)

        return {'label': self.label, 'prob': self.prob}
        
